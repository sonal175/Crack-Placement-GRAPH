// Check bipartite graph using DFS

// TC-O(N+E) SC-O(N+E)+O(N)+O(N)

// Code--


bool bipartite(int node, vector<int>adj[],int color[]){
    if(color[node]==-1) color[node]=1; // can take color[node]=0 (no difference)
     for(auto it: adj[node]){
         if(color[it]==-1){
             color[node]=1-color[node];
             if(!bipartite(it,adj,color)){
                 return false;
             }
         }else if(color[it]==color[node]){
             return false;
         }
     }
     return true;
    
    
}

bool check(vector<int>adj[],int n){
    int color[n];
    memset(color,-1,sizeof color);
    for(int i=0;i<n;i++){
        if(color[i]==-1){
            if(!bipartite(i,adj,color)){
                return false;
            }
        }
    }
    return true;
}
